// The engine name must match the InDesign ExtendScript engine used by the CEP panel
// This name is generated by CEP and tied to the info in the manifest.xml

//@targetengine $$EXTENSION_ID$$_Engine_Id

// This script does nothing apparent
//
// It is used to start up the debuggable persistent ExtendScript engine used by 
// the $$EXTENSION_BUNDLENAME$$ extension
//
// If we want to debug this engine using Visual Studio Code, we need to 
// perform some steps in the correct order:
//
// Beforehand, inspect `shared_js_jsx\tweakableSettings.js` and set up things 
// like the log level, the log output, and so on.
//
// 1. Quit everything
//
// 2. Launch Visual Studio Code with the ExtendScript debugger extension
//    (it MUST be launched before InDesign)
//
// 3. Launch InDesign with the extension (or debug extension) installed. 
//    DO NOT ACCESS THE PANEL YET!. That way, the panel will NOT yet initialize
//    the ExtendScript engine and that is important.
//
// 4. Run this script inside InDesign from Visual Studio Code. This script 
//    will now create an ExtendScript engine by the same name as the one that's 
//    about to be used by the panel.
//    Because this engine is created from Visual Studio Code, it is debuggable
//    with the VSCode ExtendScript debugger.
//
// 5. If need be set the `$$SHORTCODE$$.S.MANUAL_START_FROM_CHROME` in `shared_js_jsx\tweakableSettings.js` 
//    to `false`. That way, the panel startup code will NOT run when the panel 
//    is started from the InDesign menu bar.
//
// 6. Start the panel in InDesign (Windows - Extensions - $$EXTENSION_MENUNAME$$)
//    Unless `$$SHORTCODE$$.S.MANUAL_START_FROM_CHROME` is set to `false` this now loads 
//    the JavaScript startup and the panel will also start interacting
//    with the ExtendScript engine we created in step 4 (so we can use VSCode to inspect stuff)
//
// 7. If `$$SHORTCODE$$.S.MANUAL_START_FROM_CHROME` has been set to false, launch a Chrome web browser
//    and visit `localhost:$$DEBUGPORT$$` (port number is set in the `debug` file in the root of the repo)
//    Set up any breakpoints you want.
//    From the Chrome debugger console, call `init()` to trigger the startup code
//
// 8. Attach to the engine and start inspecting
//
//    On Mac, InDesign is subject to 'app nap' - it will be put to sleep by Mac OS X
//    When that happens, the debugger will become slow or non-responsive.
//    The cure is to quickly bring InDesign to the foreground, then switch back to the 
//    debugger - that wakes it up out of the 'app nap'.
//

if ("undefined" == typeof $$SHORTCODE$$) {
    alert("Debuggable ES engine '$$EXTENSION_ID$$_Engine_Id' has been created");
}
else {
    alert("Non-debuggable ES engine '$$EXTENSION_ID$$_Engine_Id' already exists.\nConsult docs in jsx/manuallyPreloadIDSN_ES_EngineFromDebugger.jsx");
}